---
- hosts: web
  tasks:
    - name: Load the inventory
      ping: {}

    - name: Make sure nginx ssl folder exists.
      file:
        state: directory
        dest: /etc/nginx/ssl

    - name: Copy ssl cert to nginx folder
      copy:
        content: "{{ ssl_cert }}"
        dest: "{{ ssl_cert_path }}"

    - name: Copy ssl key to nginx folder
      copy:
        content: "{{ ssl_key }}"
        dest: "{{ ssl_key_path }}"

    - name: Copy ssl dhparam to nginx folder
      copy:
        content: "{{ ssl_dhparam }}"
        dest: "{{ ssl_dhparam_path }}"

    - name: Create the web group
      group:
        name={{ web_group }}
        gid=10000
        state=present

    - name: Create the web user
      user:
        name={{ web_user }}
        uid=10000
        group={{ web_group }}
        state=present

- hosts: web
  roles:
    - role: wcl-nginx
      ssl_config:
        - ssl_certificate_key {{ ssl_key_path }}
        - ssl_certificate {{ ssl_cert_path }}
        - ssl_protocols TLSv1 TLSv1.1 TLSv1.2
        - ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS'
        - ssl_prefer_server_ciphers on
        - ssl_dhparam {{ ssl_dhparam_path }}
        - ssl_stapling on
        - ssl_stapling_verify on

      nginx_user: "{{ web_user }}"
      nginx_group: "{{ web_group }}"
      nginx_http_params:
        - sendfile on
        - server_tokens off
        - access_log /var/log/nginx/access.log
        - error_log /var/log/nginx/error.log
        - types_hash_max_size 2048
        - server_name_in_redirect on
        - port_in_redirect off
        - server_names_hash_bucket_size 64
        - gzip on
        - gzip_disable msie6
        - gzip_proxied any
        - gzip_comp_level 6
        - gzip_buffers 16 8k
        - gzip_http_version 1.1
        - gzip_types text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml font/ttf font/opentype

      nginx_sites:
        default:
          - listen {{ nginx_listen }}
          - server_name _

        status:
          - listen 127.0.0.1:8001
          - location /nginx_status { stub_status on; access_log off; }

        redirect_to_https:
          - listen 80
          - server_name {{ domain }}
          - return 301 https://$host$request_uri

        app:
          - listen {% if env == "dev" %}0.0.0.0:443 ssl{% else %}{{ nginx_listen }}{% endif %}
          - server_name {{ domain }}
          - location / { proxy_pass http://app; proxy_set_header Host $host;}
          - error_page 404 /404.html
          - error_page 500 403 =404 /404.html
          - add_header Strict-Transport-Security "max-age=0; includeSubDomains"

        static:
          - listen 0.0.0.0:443 ssl
          - index index.html
          - server_name {{ static_domain }}
          - location / { alias {{ webroot }}; }

      nginx_configs:
        upstream:
          - upstream app { {% for host in groups['app'] %}server {{ hostvars[host]['ansible_eth0']['ipv4']['address'] }}:{{ app_port }}; {% endfor %} }
        ssl: "{% if env == 'dev' %}{{ ssl_config }}{% else %}[]{% endif %}"

  tasks:
    - name: Ensure mime types are present for the Fonts
      lineinfile:
        line={{ item }}
        dest=/etc/nginx/mime.types
        insertbefore='\}'
      with_items:
        - 'font/ttf        ttf;'
        - 'font/opentype   otf;'

    - name: Update permissions of nginx folders
      file:
        dest=/var/lib/nginx/
        state=directory
        recurse=yes
        owner={{ web_user }}
        group={{ web_group }}
